// Translation Service compatible with GitHub Pages
const MY_MEMORY_API = 'https://api.mymemory.translated.net/get';

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
export const getWordsByLevel = (level) => {
  const words = {
    A1: ["run", "go", "come", "see", "look", "make", "take", "get", "give", "know", "think", "say", "find", "want", "use", "work", "call", "try", "need", "feel", "good", "bad", "big", "small", "happy", "sad", "hot", "cold", "young", "old", "long", "short", "new", "man", "woman", "child", "day", "night", "time", "year", "week", "home", "school", "work", "life", "money", "friend", "people", "country", "city", "place", "water", "food"],
    A2: ["weekend", "beautiful", "important", "interesting", "difficult", "easy", "possible", "impossible", "necessary", "dangerous", "expensive", "cheap", "healthy", "ill", "tired", "hungry", "thirsty", "busy", "free", "ready", "sure", "afraid", "angry", "excited", "surprised", "worried", "bored", "interested", "proud", "shy"],
    B1: ["environment", "technology", "communication", "education", "healthcare", "transportation", "entertainment", "politics", "economy", "culture", "history", "science", "nature", "society", "future", "success", "failure", "opportunity", "challenge", "experience"],
    B2: ["sustainable", "innovation", "globalization", "artificial intelligence", "climate change", "digital transformation", "entrepreneurship", "leadership", "collaboration", "creativity", "critical thinking", "problem solving", "decision making", "time management", "stress management"]
  };
  
  return words[level] || [];
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
const getSynonyms = async (word) => {
  try {
    const response = await fetch(`https://api.datamuse.com/words?rel_syn=${word}&max=3`);
    const data = await response.json();
    return data.map(item => item.word);
  } catch (error) {
    console.log('Synonyms API failed');
    return [];
  }
};

// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
export const translateWord = async (word) => {
  try {
    console.log('Translating word:', word);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MyMemory API –±–µ–∑ CORS –ø—Ä–æ–±–ª–µ–º
    const response = await fetch(`${MY_MEMORY_API}?q=${encodeURIComponent(word)}&langpair=en|ru`);
    
    if (response.ok) {
      const data = await response.json();
      if (data.responseData && data.responseData.translatedText) {
        return data.responseData.translatedText;
      }
    }
    
    // Fallback –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    return getFallbackTranslation(word);
    
  } catch (error) {
    console.error('Translation error:', error);
    return getFallbackTranslation(word);
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
export const getWordInfo = async (word) => {
  try {
    const [translation, synonyms] = await Promise.all([
      translateWord(word),
      getSynonyms(word)
    ]);

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const allVariations = [
      translation,
      ...getWordVariations(translation)
    ];

    return {
      word,
      translation,
      synonyms,
      allAcceptedAnswers: [...new Set(allVariations.filter(Boolean))]
    };
  } catch (error) {
    console.error('Error getting word info:', error);
    const fallback = getFallbackTranslation(word);
    return {
      word,
      translation: fallback,
      synonyms: [],
      allAcceptedAnswers: [fallback, ...getWordVariations(fallback)].filter(Boolean)
    };
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
const getWordVariations = (russianWord) => {
  const variations = [russianWord];
  
  // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º
  if (russianWord.endsWith('–∞—Ç—å')) {
    const stem = russianWord.slice(0, -3);
    variations.push(stem + '–∞—é', stem + '–∞–µ—à—å', stem + '–∞–µ—Ç');
  }
  
  if (russianWord.endsWith('–∏—Ç—å')) {
    const stem = russianWord.slice(0, -3);
    variations.push(stem + '—é', stem + '–∏—à—å', stem + '–∏—Ç');
    if (russianWord === '–Ω–∞—Ö–æ–¥–∏—Ç—å') {
      variations.push('–Ω–∞–π—Ç–∏', '–Ω–∞—à–µ–ª', '–Ω–∞—à–ª–∞', '–Ω–∞—à–ª–∏', '–Ω–∞–π–¥–∏');
    }
    if (russianWord === '–∏—Å–∫–∞—Ç—å') {
      variations.push('–∏—â—É', '–∏—â–µ—à—å', '–∏—â–µ—Ç');
    }
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
  const specialRules = {
    '–Ω–∞—Ö–æ–¥–∏—Ç—å': ['–Ω–∞–π—Ç–∏', '–Ω–∞—à–µ–ª', '–Ω–∞—à–ª–∞', '–Ω–∞—à–ª–∏', '–Ω–∞–π–¥–∏', '–∏—â—É', '–∏—â–µ—à—å', '–∏—â–µ—Ç', '–∏—Å–∫–∞—Ç—å'],
    '–¥–∞–≤–∞—Ç—å': ['–¥–∞—Ç—å', '–¥–∞–ª', '–¥–∞–ª–∞', '–¥–∞–ª–∏', '–¥–∞–π'],
    '–±—Ä–∞—Ç—å': ['–≤–∑—è—Ç—å', '–≤–∑—è–ª', '–≤–∑—è–ª–∞', '–≤–∑—è–ª–∏', '–≤–æ–∑—å–º–∏'],
    '–¥–µ–ª–∞—Ç—å': ['—Å–¥–µ–ª–∞—Ç—å', '—Å–¥–µ–ª–∞–ª', '—Å–¥–µ–ª–∞–ª–∞', '—Å–¥–µ–ª–∞–ª–∏'],
    '–≥–æ–≤–æ—Ä–∏—Ç—å': ['—Å–∫–∞–∑–∞—Ç—å', '—Å–∫–∞–∑–∞–ª', '—Å–∫–∞–∑–∞–ª–∞', '—Å–∫–∞–∑–∞–ª–∏', '—Å–∫–∞–∂–∏'],
    '–∏–¥—Ç–∏': ['–ø–æ–π—Ç–∏', '—à–µ–ª', '—à–ª–∞', '—à–ª–∏', '–∏–¥–∏'],
    '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å': ['–ø—Ä–∏–π—Ç–∏', '–ø—Ä–∏—à–µ–ª', '–ø—Ä–∏—à–ª–∞', '–ø—Ä–∏—à–ª–∏', '–ø—Ä–∏–¥–∏'],
    '–±–µ–≥–∞—Ç—å': ['–±–µ–∂–∞—Ç—å', '–±–µ–∂–∞–ª', '–±–µ–∂–∞–ª–∞', '–±–µ–∂–∞–ª–∏', '–±–µ–≥–∏'],
    '—Ä–∞–±–æ—Ç–∞—Ç—å': ['–ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å'],
    '–∑–≤–æ–Ω–∏—Ç—å': ['–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏'],
    '–ø—ã—Ç–∞—Ç—å—Å—è': ['–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–ø–æ–ø—Ä–æ–±—É–π'],
    '–Ω—É–∂–¥–∞—Ç—å—Å—è': ['–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '–Ω—É–∂–Ω–æ', '–Ω—É–∂–Ω—ã']
  };
  
  if (specialRules[russianWord]) {
    variations.push(...specialRules[russianWord]);
  }
  
  return [...new Set(variations)];
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
export const getRandomFact = async () => {
  const fallbackFacts = [
    { title: "Brain", text: "Your brain weighs about 1.4 kg and consumes 20% of your energy.", emoji: "üß†" },
    { title: "Space", text: "The Milky Way galaxy contains over 100 billion stars.", emoji: "üåå" },
    { title: "Honey", text: "Honey never spoils. Archaeologists have found edible honey in Egyptian tombs over 3,000 years old.", emoji: "üçØ" },
    { title: "Lightning", text: "Lightning strikes the Earth about 100 times per second.", emoji: "‚ö°" }
  ];
  
  return fallbackFacts[Math.floor(Math.random() * fallbackFacts.length)];
};

// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ —á–∏—Å–ª–∞—Ö
export const getNumberFact = async () => {
  const fallbackFacts = [
    { title: "Number Fact", text: "The number 1 is the only number that is neither prime nor composite.", emoji: "üî¢" },
    { title: "Math Fact", text: "A circle has 360 degrees.", emoji: "üìê" }
  ];
  
  return fallbackFacts[Math.floor(Math.random() * fallbackFacts.length)];
};

// –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤
export const getRandomFacts = async (count = 4) => {
  const facts = [];
  
  for (let i = 0; i < count; i++) {
    const fact = i % 2 === 0 ? await getRandomFact() : await getNumberFact();
    facts.push(fact);
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  return facts;
};

// Fallback –ø–µ—Ä–µ–≤–æ–¥—ã
const getFallbackTranslation = (word) => {
  const fallbackTranslations = {
    "run": "–±–µ–≥–∞—Ç—å",
    "go": "–∏–¥—Ç–∏", 
    "come": "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å",
    "see": "–≤–∏–¥–µ—Ç—å",
    "look": "—Å–º–æ—Ç—Ä–µ—Ç—å",
    "make": "–¥–µ–ª–∞—Ç—å",
    "take": "–±—Ä–∞—Ç—å",
    "get": "–ø–æ–ª—É—á–∞—Ç—å",
    "give": "–¥–∞–≤–∞—Ç—å",
    "know": "–∑–Ω–∞—Ç—å",
    "think": "–¥—É–º–∞—Ç—å",
    "say": "—Å–∫–∞–∑–∞—Ç—å",
    "find": "–Ω–∞—Ö–æ–¥–∏—Ç—å",
    "want": "—Ö–æ—Ç–µ—Ç—å",
    "use": "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
    "work": "—Ä–∞–±–æ—Ç–∞—Ç—å",
    "call": "–∑–≤–æ–Ω–∏—Ç—å",
    "try": "–ø—ã—Ç–∞—Ç—å—Å—è",
    "need": "–Ω—É–∂–¥–∞—Ç—å—Å—è",
    "feel": "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å",
    "good": "—Ö–æ—Ä–æ—à–∏–π",
    "bad": "–ø–ª–æ—Ö–æ–π",
    "big": "–±–æ–ª—å—à–æ–π",
    "small": "–º–∞–ª–µ–Ω—å–∫–∏–π",
    "happy": "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π",
    "sad": "–≥—Ä—É—Å—Ç–Ω—ã–π",
    "hot": "–≥–æ—Ä—è—á–∏–π",
    "cold": "—Ö–æ–ª–æ–¥–Ω—ã–π",
    "young": "–º–æ–ª–æ–¥–æ–π",
    "old": "—Å—Ç–∞—Ä—ã–π",
    "long": "–¥–ª–∏–Ω–Ω—ã–π",
    "short": "–∫–æ—Ä–æ—Ç–∫–∏–π",
    "new": "–Ω–æ–≤—ã–π",
    "man": "–º—É–∂—á–∏–Ω–∞",
    "woman": "–∂–µ–Ω—â–∏–Ω–∞",
    "child": "—Ä–µ–±–µ–Ω–æ–∫",
    "day": "–¥–µ–Ω—å",
    "night": "–Ω–æ—á—å",
    "time": "–≤—Ä–µ–º—è",
    "year": "–≥–æ–¥",
    "week": "–Ω–µ–¥–µ–ª—è",
    "home": "–¥–æ–º",
    "school": "—à–∫–æ–ª–∞",
    "job": "—Ä–∞–±–æ—Ç–∞",
    "life": "–∂–∏–∑–Ω—å",
    "money": "–¥–µ–Ω—å–≥–∏",
    "friend": "–¥—Ä—É–≥",
    "people": "–ª—é–¥–∏",
    "country": "—Å—Ç—Ä–∞–Ω–∞",
    "city": "–≥–æ—Ä–æ–¥",
    "place": "–º–µ—Å—Ç–æ",
    "water": "–≤–æ–¥–∞",
    "food": "–µ–¥–∞"
  };

  return fallbackTranslations[word] || `${word} (–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)`;
};